// Generated by CoffeeScript 1.4.0
(function() {

  describe("IntervalParser", function() {
    var IRRELEVANT_INTERVAL, IRRELEVANT_INTERVAL_SYMBOL, IRRELEVANT_SET, createIntervalFactoryStub, createIntervalSymbolFactoryStub, createSetFactoryStub, intervalFactoryStub, intervalParser, intervalSymbolFactoryStub, setFactoryStub;
    IRRELEVANT_SET = "XXX";
    IRRELEVANT_INTERVAL = "XXXX";
    IRRELEVANT_INTERVAL_SYMBOL = "XXXXX";
    setFactoryStub = null;
    intervalFactoryStub = null;
    intervalSymbolFactoryStub = null;
    intervalParser = null;
    beforeEach(function() {
      setFactoryStub = createSetFactoryStub();
      intervalFactoryStub = createIntervalFactoryStub();
      intervalSymbolFactoryStub = createIntervalSymbolFactoryStub();
      return intervalParser = new FUNDDY.JsTranslations.IntervalParser(setFactoryStub, intervalFactoryStub, intervalSymbolFactoryStub);
    });
    createSetFactoryStub = function() {
      setFactoryStub = new FUNDDY.JsTranslations.SetFactory();
      sinon.stub(setFactoryStub, "create").returns(IRRELEVANT_SET);
      return setFactoryStub;
    };
    createIntervalFactoryStub = function() {
      intervalFactoryStub = new FUNDDY.JsTranslations.IntervalFactory();
      sinon.stub(intervalFactoryStub, "create").returns(IRRELEVANT_INTERVAL);
      return intervalFactoryStub;
    };
    createIntervalSymbolFactoryStub = function() {
      intervalSymbolFactoryStub = new FUNDDY.JsTranslations.IntervalSymbolFactory();
      sinon.stub(intervalSymbolFactoryStub, "create").returns(IRRELEVANT_INTERVAL_SYMBOL);
      return intervalSymbolFactoryStub;
    };
    return describe("#parse()", function() {
      it("returns a Set object for a given set string", function() {
        var set, testSets, _i, _len, _results;
        testSets = ["{0}", "{0,-3}", "{0,-3,4}"];
        _results = [];
        for (_i = 0, _len = testSets.length; _i < _len; _i++) {
          set = testSets[_i];
          _results.push(expect(intervalParser.parse(set)).to.be(IRRELEVANT_SET));
        }
        return _results;
      });
      it("returns a Interval object for a given interval string", function() {
        var interval, testIntervals, _i, _len, _results;
        testIntervals = ["]1,2]", "]1,2[", "[1,2]", "[1,2[", "]-1,2]", "]-Inf,Inf]"];
        _results = [];
        for (_i = 0, _len = testIntervals.length; _i < _len; _i++) {
          interval = testIntervals[_i];
          _results.push(expect(intervalParser.parse(interval)).to.be(IRRELEVANT_INTERVAL));
        }
        return _results;
      });
      return it("throws parse error for malformed input", function() {
        var malformedString, malformedStrings, _i, _len, _results;
        malformedStrings = ["]1,", "{}", "}"];
        _results = [];
        for (_i = 0, _len = malformedStrings.length; _i < _len; _i++) {
          malformedString = malformedStrings[_i];
          _results.push(expect(function() {
            return intervalParser.parse(malformedString);
          }).to.throwError());
        }
        return _results;
      });
    });
  });

}).call(this);
