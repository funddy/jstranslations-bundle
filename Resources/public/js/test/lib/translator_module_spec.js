// Generated by CoffeeScript 1.4.0
(function() {

  window.TRANSLATIONS = {
    "en": {
      "test.id.simple": "This is a %word% test",
      "test.id.choice": "{0} There is no apples|{1} There is one apple|]1,Inf[ There are a lot of apples",
      "test.id.choice.parameters": "{0} No elements|{1} One element|]1,Inf] %count% elements",
      "test.id.outofchoice": "{0} No choices",
      "test.id.invalidrange": "{test",
      "test.id.empty": ""
    }
  };

  describe("TranslatorModule", function() {
    var translator;
    translator = null;
    before(function() {
      return translator = window.Translator;
    });
    describe("#trans()", function() {
      it("replaces parameters with values", function() {
        return expect(translator.trans("test.id.simple", {
          "%word%": "simple"
        })).to.be("This is a simple test");
      });
      return it("throws exception if id was not found", function() {
        return expect(function() {
          return translator.transChoice("non.existent.id", 0);
        }).to.throwError();
      });
    });
    return describe("#transChoice()", function() {
      it("throws exception if id was not found", function() {
        return expect(function() {
          return translator.transChoice("non.existent.id", 0);
        }).to.throwError();
      });
      it("parse and process interval set", function() {
        expect(translator.transChoice("test.id.choice", 0)).to.be("There is no apples");
        return expect(translator.transChoice("test.id.choice", 1)).to.be("There is one apple");
      });
      it("parse and process interval", function() {
        return expect(translator.transChoice("test.id.choice", 2)).to.be("There are a lot of apples");
      });
      it("replaces parameters with values", function() {
        return expect(translator.transChoice("test.id.choice.parameters", 2, {
          "%count%": 2
        })).to.be("2 elements");
      });
      it("throws exception if choice number was not found", function() {
        return expect(function() {
          return translator.transChoice("test.id.outofchoice", 1);
        }).to.throwError();
      });
      it("throws exception if choice is malformed", function() {
        return expect(function() {
          return translator.transChoice("test.id.invalidrange", 2);
        }).to.throwError();
      });
      return it("throws exception if choice is empty", function() {
        return expect(function() {
          return translator.transChoice("test.id.empty", 0);
        }).to.throwError();
      });
    });
  });

}).call(this);
